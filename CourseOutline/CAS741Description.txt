CAS 741/CSE 741 Development of Scientific Software

Overview

This course presents the basic principles of software development for reliable scientific and engineering software.  Using example applications, a systematic process is given for the development and documentation of requirements, system design, module design, implementation, testing and inspection.

Description

Scientific computation consists of using computer tools to simulate mathematical models of real world systems so that we can better understand and predict the system's behaviour.  A small sample of some important applications of scientific computation include the following: designing new automotive parts, analysing the flow of blood in the body, and determining the concentration of a pollutant released into the groundwater.  As these examples illustrate, scientific computation can be used for tackling problems that impact such areas as manufacturing, financial planning, environmental policy, and the health, welfare and safety of communities.  Given the important applications of scientific computation, it is surprising that little emphasis is currently placed on the quality of the software that performs the computations.  Although many successful and sophisticated algorithms have been developed for scientific computing, the software often suffers from problems with such qualities as reliability, usability, verifiability, maintainability, reusability and portability.  This is why scientific software is routinely sold with a disclaimer instead of a warranty.  To make matters worse, the quality of scientific software is becoming increasingly more of an issue because the complexity and size of the problems that can be simulated on modern computers is constantly growing.  The question for the future is how to meet the growing need for providing quick solutions to large and complex problems, and at the same time ensure that the solutions are correct?  This graduate course will investigate this question by applying to scientific computing problems such software engineering methodologies as commonality analysis, requirements analysis and documentation, modular decomposition, module interface specification, testing, code and document generation and assurance cases.  

The course will look at tools, techniques and principles for iterative and incremental development of scientific and engineering software.  Despite the iterative development cycle, the documentation will follow 5 rational steps: i) identify the problem, ii) document the requirements, iii) design the system, iv) implement the software, and v) perform tests.  This structure is well suited to scientific computing because it parallels the idealized scientific method, as follows: i) a physical problem of engineering or scientific importance is identified; ii) a system of governing equations and the associated boundary conditions are derived; iii) a numerical algorithms are developed; iv) the numerical algorithms are implemented on a computer; and, v) the model and the computed results are verified and validated, with the potential to return to one of the previous steps if necessary.  These five steps are inherently multidisciplinary as they involve skills from physical modelling, mathematics, numerical analysis and computer science.  For this reason it is important that requirements (including assumptions) and design decisions are clearly documented.

Delivery

The course will be taught as a series of lectures and group discussions.  An important component of the course grade will be individual projects to design and develop software for solving a scientific computing problem.

Prerequisites

An interest in scientific computing is important, but no knowledge of numerical methods beyond what is typically covered in an undergraduate degree will be assumed.  The projects will be selected to match the students background knowledge and interests.